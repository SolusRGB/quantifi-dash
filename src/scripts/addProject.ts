import { PrismaClient, type Project } from "@prisma/client";
import { type ProjectData } from "../types/projectTypes";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const prisma = new PrismaClient();

/**
 * Adds a new project to the database.
 * The project data is hardcoded in this function.
 * The image is read from the file system and stored as a Buffer.
 * The project is added to the database using Prisma.
 * If successful, the added project is logged to the console.
 * If an error occurs, the error is logged to the console.
 * Ran via 'ts-node src/scripts/addProject.ts'.
 * @returns {Promise<void>} A promise that resolves when the project is added successfully.
 */
export async function addProject() {
  // Get the current file path and directory path
  const __filename = fileURLToPath(import.meta.url);

  // Get the directory path of the current file
  const __dirname = path.dirname(__filename);

  // Define the path to the project image
  const imagePath = path.join(__dirname, "../../public/icons/satori.png");

  // Read the image file as a Buffer because Prisma expects the image to be a Buffer type.
  const imageBuffer = fs.readFileSync(imagePath);

  // Define the project data, id is omitted because it's generated by Prisma automatically.
  const projectData: Omit<ProjectData, "id"> = {
    name: "Satori",
    assessDate: "AUG 1",
    score: "83",
    mintDate: "MINTED",
    href: "/projects/satori",
    chain: "solana",
    image: imageBuffer,
  };

  // Add the project to the database
  try {
    // Create a new project in the database using Prisma client
    const project: Project = await prisma.project.create({
      data: projectData,
    });

    console.log("Project added:", project);
  } catch (error) {
    console.error("Failed to add project:", error);
  }
}

// Call the addProject function to add a new project to the database and handle any errors
addProject()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(() => {
    prisma.$disconnect().catch((e) => {
      console.error("Failed to disconnect:", e);
    });
  });
